package de.metux.nebulon.fs;

import java.lang.StringBuffer;
import java.io.OutputStream;
import de.metux.nebulon.util.Log;
import de.metux.nebulon.base.ICryptBlockStore;
import de.metux.nebulon.base.IBlockStore;
import de.metux.nebulon.base.Score;
import de.metux.nebulon.base.CryptScore;
import de.metux.nebulon.base.CryptKey;
import de.metux.nebulon.base.BlockRef;
import java.util.ArrayList;
import java.io.IOException;
import de.metux.nebulon.util.FileIO;

public class CryptFileOutputStream extends OutputStream {

	private static final int datalist_max = 128;

	ICryptBlockStore cryptblockstore;
	IBlockStore blockstore;
	BlockRefWriter brw;
	ArrayList<CryptScore> keylist = new ArrayList<CryptScore>();

	/** this is the key to the keylist block **/
	CryptKey keylist_key;
	Score header_score;

	public CryptFileOutputStream(IBlockStore bs, ICryptBlockStore cbs) {
		cryptblockstore = cbs;
		blockstore = bs;
		brw = new BlockRefWriter(bs, BlockRef.type_blocklist);
	}

	private byte[] serializeKeyList() {
		StringBuffer sb = new StringBuffer();
		for (CryptScore cs : keylist) {
			sb.append(cs.cipher);
			sb.append(":");
			sb.append(FileIO.byteArray2Hex(cs.key));
			sb.append("\n");
		}
		return sb.toString().getBytes();
	}

	public void close() throws IOException {
		/** write out the key list **/
		CryptScore cryptscore = cryptblockstore.put(serializeKeyList());
		Score blockrefs = brw.finish();
		StringBuffer sb = new StringBuffer();
		sb.append("Content-Type: nebulon/cryptfile-1\n");
		sb.append("BlockRefList: ");
		sb.append(blockrefs.toString());
		sb.append("\nKeyList: ");
		sb.append(cryptscore.score.toString());
		sb.append("\n");
		System.err.println(sb.toString());
		header_score = blockstore.put(sb.toString().getBytes());
		keylist_key = cryptscore.getKey();
	}

	public CryptKey getKey() {
		return keylist_key;
	}

	public Score getScore() {
		return header_score;
	}

	public void flush() {
		Log.err("CryptFileOutputStream::flush() not implemented yet");
	}

	public void write(int b) {
		byte[] a = new byte[1];
		a[0] = (byte)(b & 0xFF);
		write(a);
	}

	public void write(byte[] b, int off, int len) {
		byte[] a = new byte[len];
		for (int x=0; x<len; x++)
			a[x] = b[x+off];
		write(a);
	}

	private void addBlocklistRef(Score s) {
	}

	public void write(byte[] b) {
		CryptScore score = cryptblockstore.put(b);
		brw.add(score.score);
		keylist.add(score);
	}
}
